(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{77:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(6),o=(n(0),n(86)),r={id:"index",title:"GetX Overview",description:"Introduction > Installation: Installation instructions for Redux and related packages",hide_title:!0},l={unversionedId:"index",id:"index",isDocsHomePage:!1,title:"GetX Overview",description:"Introduction > Installation: Installation instructions for Redux and related packages",source:"@site/docs/index.md",slug:"/index",permalink:"/getx-docs/index",version:"current",sidebar:"docs",next:{title:"Overview",permalink:"/getx-docs/state-management/index"}},s=[{value:"Internationalization",id:"internationalization",children:[{value:"Translations",id:"translations",children:[]},{value:"Locales",id:"locales",children:[]}]},{value:"Change Theme",id:"change-theme",children:[]},{value:"GetConnect",id:"getconnect",children:[{value:"Default configuration",id:"default-configuration",children:[]},{value:"Custom configuration",id:"custom-configuration",children:[]}]},{value:"GetPage Middleware",id:"getpage-middleware",children:[{value:"Priority",id:"priority",children:[]},{value:"Redirect",id:"redirect",children:[]},{value:"onPageCalled",id:"onpagecalled",children:[]},{value:"OnBindingsStart",id:"onbindingsstart",children:[]},{value:"OnPageBuildStart",id:"onpagebuildstart",children:[]},{value:"OnPageBuilt",id:"onpagebuilt",children:[]},{value:"OnPageDispose",id:"onpagedispose",children:[]}]},{value:"Other Advanced APIs",id:"other-advanced-apis",children:[{value:"Optional Global Settings and Manual configurations",id:"optional-global-settings-and-manual-configurations",children:[]},{value:"Local State Widgets",id:"local-state-widgets",children:[]}]},{value:"Useful tips",id:"useful-tips",children:[]},{value:"StateMixin",id:"statemixin",children:[]},{value:"Community channels",id:"community-channels",children:[]},{value:"How to contribute",id:"how-to-contribute",children:[]},{value:"Articles and videos",id:"articles-and-videos",children:[]}],c={rightToc:s};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"https://raw.githubusercontent.com/jonataslaw/getx-community/master/get.png",alt:null}))),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://pub.dev/packages/get"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/pub/v/get.svg?label=get&color=blue",alt:"pub package"}))),"\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://pub.dev/packages/get/score"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://badges.bar/get/likes",alt:"likes"}))),"\n",Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"https://github.com/jonataslaw/get/workflows/build/badge.svg",alt:"building"})),"\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://pub.dev/packages/effective_dart"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/badge/style-effective_dart-40c4ff.svg",alt:"style: effective dart"}))),"\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://discord.com/invite/9Hpt99N"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/discord/722900883784073290.svg?logo=discord",alt:"Discord Shield"}))),"\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://communityinviter.com/apps/getxworkspace/getx"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/badge/slack-join-orange.svg",alt:"Get on Slack"}))),"\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://t.me/joinchat/PhdbJRmsZNpAqSLJL6bH7g"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/badge/chat-on%20Telegram-blue.svg",alt:"Telegram"})))),Object(o.b)("p",null,Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"https://raw.githubusercontent.com/jonataslaw/getx-community/master/getx.png",alt:null}))),Object(o.b)("h1",{id:"about-get"},"About Get"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"GetX is an extra-light and powerful solution for Flutter. It combines high-performance state management, intelligent dependency injection, and route management quickly and practically.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"GetX has 3 basic principles. This means that these are the priority for all resources in the library: ",Object(o.b)("strong",{parentName:"p"},"PRODUCTIVITY, PERFORMANCE AND ORGANIZATION.")),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"PERFORMANCE:")," GetX is focused on performance and minimum consumption of resources. GetX does not use Streams or ChangeNotifier.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"PRODUCTIVITY:")," GetX uses an easy and pleasant syntax. No matter what you want to do, there is always an easier way with GetX. It will save hours of development and will provide the maximum performance your application can deliver."),Object(o.b)("p",{parentName:"li"},'Generally, the developer should be concerned with removing controllers from memory. With GetX this is not necessary because resources are removed from memory when they are not used by default. If you want to keep it in memory, you must explicitly declare "permanent: true" in your dependency. That way, in addition to saving time, you are less at risk of having unnecessary dependencies on memory. Dependency loading is also lazy by default.')),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"ORGANIZATION:")," GetX allows the total decoupling of the View, presentation logic, business logic, dependency injection, and navigation. You do not need context to navigate between routes, so you are not dependent on the widget tree (visualization) for this. You don't need context to access your controllers/blocs through an inheritedWidget, so you completely decouple your presentation logic and business logic from your visualization layer. You do not need to inject your Controllers/Models/Blocs classes into your widget tree through ",Object(o.b)("inlineCode",{parentName:"p"},"MultiProvider"),"s. For this, GetX uses its own dependency injection feature, decoupling the DI from its view completely."),Object(o.b)("p",{parentName:"li"},"With GetX you know where to find each feature of your application, having clean code by default. In addition to making maintenance easy, this makes the sharing of modules something that until then in Flutter was unthinkable, something totally possible.\nBLoC was a starting point for organizing code in Flutter, it separates business logic from visualization. GetX is a natural evolution of this, not only separating the business logic but the presentation logic. Bonus injection of dependencies and routes are also decoupled, and the data layer is out of it all. You know where everything is, and all of this in an easier way than building a hello world.\nGetX is the easiest, practical, and scalable way to build high-performance applications with the Flutter SDK. It has a large ecosystem around it that works perfectly together, it's easy for beginners, and it's accurate for experts. It is secure, stable, up-to-date, and offers a huge range of APIs built-in that are not present in the default Flutter SDK.")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"GetX is not bloated. It has a multitude of features that allow you to start programming without worrying about anything, but each of these features are in separate containers and are only started after use. If you only use State Management, only State Management will be compiled. If you only use routes, nothing from the state management will be compiled.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"GetX has a huge ecosystem, a large community, a large number of collaborators, and will be maintained as long as the Flutter exists. GetX too is capable of running with the same code on Android, iOS, Web, Mac, Linux, Windows, and on your server.\n",Object(o.b)("strong",{parentName:"p"},"It is possible to fully reuse your code made on the frontend on your backend with ",Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"https://github.com/jonataslaw/get_server"}),"Get Server")),"."))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"In addition, the entire development process can be completely automated, both on the server and on the front end with ",Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"https://github.com/jonataslaw/get_cli"}),"Get CLI")),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"In addition, to further increase your productivity, we have the\n",Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"https://marketplace.visualstudio.com/items?itemName=get-snippets.get-snippets"}),"extension to VSCode")," and the ",Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"https://plugins.jetbrains.com/plugin/14975-getx-snippets"}),"extension to Android Studio/Intellij"))),Object(o.b)("h1",{id:"installing"},"Installing"),Object(o.b)("p",null,"Add Get to your pubspec.yaml file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"dependencies:\n  get:\n")),Object(o.b)("p",null,"Import get in files that it will be used:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import 'package:get/get.dart';\n")),Object(o.b)("h1",{id:"counter-app-with-getx"},"Counter App with GetX"),Object(o.b)("p",null,'The "counter" project created by default on new project on Flutter has over 100 lines (with comments). To show the power of Get, I will demonstrate how to make a "counter" changing the state with each click, switching between pages and sharing the state between screens, all in an organized way, separating the business logic from the view, in ONLY 26 LINES CODE INCLUDING COMMENTS.'),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},'Step 1:\nAdd "Get" before your MaterialApp, turning it into GetMaterialApp')),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"void main() => runApp(GetMaterialApp(home: Home()));\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Note: this does not modify the MaterialApp of the Flutter, GetMaterialApp is not a modified MaterialApp, it is just a pre-configured Widget, which has the default MaterialApp as a child. You can configure this manually, but it is definitely not necessary. GetMaterialApp will create routes, inject them, inject translations, inject everything you need for route navigation. If you use Get only for state management or dependency management, it is not necessary to use GetMaterialApp. GetMaterialApp is necessary for routes, snackbars, internationalization, bottomSheets, dialogs, and high-level apis related to routes and absence of context.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Note\xb2: This step in only necessary if you gonna use route management (",Object(o.b)("inlineCode",{parentName:"p"},"Get.to()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Get.back()")," and so on). If you not gonna use it then it is not necessary to do step 1")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},'Step 2:\nCreate your business logic class and place all variables, methods and controllers inside it.\nYou can make any variable observable using a simple ".obs".'))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Controller extends GetxController{\n  var count = 0.obs;\n  increment() => count++;\n}\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Step 3:\nCreate your View, use StatelessWidget and save some RAM, with Get you may no longer need to use StatefulWidget.")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'class Home extends StatelessWidget {\n\n  @override\n  Widget build(context) {\n\n    // Instantiate your class using Get.put() to make it available for all "child" routes there.\n    final Controller c = Get.put(Controller());\n\n    return Scaffold(\n      // Use Obx(()=> to update Text() whenever count is changed.\n      appBar: AppBar(title: Obx(() => Text("Clicks: ${c.count}"))),\n\n      // Replace the 8 lines Navigator.push by a simple Get.to(). You don\'t need context\n      body: Center(child: RaisedButton(\n              child: Text("Go to Other"), onPressed: () => Get.to(Other()))),\n      floatingActionButton:\n          FloatingActionButton(child: Icon(Icons.add), onPressed: c.increment));\n  }\n}\n\nclass Other extends StatelessWidget {\n  // You can ask Get to find a Controller that is being used by another page and redirect you to it.\n  final Controller c = Get.find();\n\n  @override\n  Widget build(context){\n     // Access the updated count variable\n     return Scaffold(body: Center(child: Text("${c.count}")));\n  }\n}\n')),Object(o.b)("p",null,"Result:"),Object(o.b)("p",null,Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"https://raw.githubusercontent.com/jonataslaw/getx-community/master/counter-app-gif.gif",alt:null}))),Object(o.b)("p",null,"This is a simple project but it already makes clear how powerful Get is. As your project grows, this difference will become more significant."),Object(o.b)("p",null,"Get was designed to work with teams, but it makes the job of an individual developer simple."),Object(o.b)("p",null,"Improve your deadlines, deliver everything on time without losing performance. Get is not for everyone, but if you identified with that phrase, Get is for you!"),Object(o.b)("h1",{id:"utils"},"Utils"),Object(o.b)("h2",{id:"internationalization"},"Internationalization"),Object(o.b)("h3",{id:"translations"},"Translations"),Object(o.b)("p",null,"Translations are kept as a simple key-value dictionary map.\nTo add custom translations, create a class and extend ",Object(o.b)("inlineCode",{parentName:"p"},"Translations"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import 'package:get/get.dart';\n\nclass Messages extends Translations {\n  @override\n  Map<String, Map<String, String>> get keys => {\n        'en_US': {\n          'hello': 'Hello World',\n        },\n        'de_DE': {\n          'hello': 'Hallo Welt',\n        }\n      };\n}\n")),Object(o.b)("h4",{id:"using-translations"},"Using translations"),Object(o.b)("p",null,"Just append ",Object(o.b)("inlineCode",{parentName:"p"},".tr")," to the specified key and it will be translated, using the current value of ",Object(o.b)("inlineCode",{parentName:"p"},"Get.locale")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Get.fallbackLocale"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"Text('title'.tr);\n")),Object(o.b)("h4",{id:"using-translation-with-singular-and-plural"},"Using translation with singular and plural"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var products = [];\nText('singularKey'.trPlural('pluralKey', products.length, Args));\n")),Object(o.b)("h4",{id:"using-translation-with-parameters"},"Using translation with parameters"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import 'package:get/get.dart';\n\n\nMap<String, Map<String, String>> get keys => {\n    'en_US': {\n        'logged_in': 'logged in as @name with email @email',\n    },\n    'es_ES': {\n       'logged_in': 'iniciado sesi\xf3n como @name con e-mail @email',\n    }\n};\n\nText('logged_in'.trParams({\n  'name': 'Jhon',\n  'email': 'jhon@example.com'\n  }));\n")),Object(o.b)("h3",{id:"locales"},"Locales"),Object(o.b)("p",null,"Pass parameters to ",Object(o.b)("inlineCode",{parentName:"p"},"GetMaterialApp")," to define the locale and translations."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"return GetMaterialApp(\n    translations: Messages(), // your translations\n    locale: Locale('en', 'US'), // translations will be displayed in that locale\n    fallbackLocale: Locale('en', 'UK'), // specify the fallback locale in case an invalid locale is selected.\n);\n")),Object(o.b)("h4",{id:"change-locale"},"Change locale"),Object(o.b)("p",null,"Call ",Object(o.b)("inlineCode",{parentName:"p"},"Get.updateLocale(locale)")," to update the locale. Translations then automatically use the new locale."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var locale = Locale('en', 'US');\nGet.updateLocale(locale);\n")),Object(o.b)("h4",{id:"system-locale"},"System locale"),Object(o.b)("p",null,"To read the system locale, you could use ",Object(o.b)("inlineCode",{parentName:"p"},"Get.deviceLocale"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"return GetMaterialApp(\n    locale: Get.deviceLocale,\n);\n")),Object(o.b)("h2",{id:"change-theme"},"Change Theme"),Object(o.b)("p",null,"Please do not use any higher level widget than ",Object(o.b)("inlineCode",{parentName:"p"},"GetMaterialApp"),' in order to update it. This can trigger duplicate keys. A lot of people are used to the prehistoric approach of creating a "ThemeProvider" widget just to change the theme of your app, and this is definitely NOT necessary with ',Object(o.b)("strong",{parentName:"p"},"GetX\u2122"),"."),Object(o.b)("p",null,"You can create your custom theme and simply add it within ",Object(o.b)("inlineCode",{parentName:"p"},"Get.changeTheme")," without any boilerplate for that:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"Get.changeTheme(ThemeData.light());\n")),Object(o.b)("p",null,"If you want to create something like a button that changes the Theme in ",Object(o.b)("inlineCode",{parentName:"p"},"onTap"),", you can combine two ",Object(o.b)("strong",{parentName:"p"},"GetX\u2122")," APIs for that:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The api that checks if the dark ",Object(o.b)("inlineCode",{parentName:"li"},"Theme")," is being used."),Object(o.b)("li",{parentName:"ul"},"And the ",Object(o.b)("inlineCode",{parentName:"li"},"Theme")," Change API, you can just put this within an ",Object(o.b)("inlineCode",{parentName:"li"},"onPressed"),":")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"Get.changeTheme(Get.isDarkMode? ThemeData.light(): ThemeData.dark());\n")),Object(o.b)("p",null,"When ",Object(o.b)("inlineCode",{parentName:"p"},".darkmode")," is activated, it will switch to the ",Object(o.b)("em",{parentName:"p"},"light theme"),", and when the ",Object(o.b)("em",{parentName:"p"},"light theme")," becomes active, it will change to ",Object(o.b)("em",{parentName:"p"},"dark theme"),"."),Object(o.b)("h2",{id:"getconnect"},"GetConnect"),Object(o.b)("p",null,"GetConnect is an easy way to communicate from your back to your front with http or websockets"),Object(o.b)("h3",{id:"default-configuration"},"Default configuration"),Object(o.b)("p",null,"You can simply extend GetConnect and use the GET/POST/PUT/DELETE/SOCKET methods to communicate with your Rest API or websockets."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class UserProvider extends GetConnect {\n  // Get request\n  Future<Response> getUser(int id) => get('http://youapi/users/$id');\n  // Post request\n  Future<Response> postUser(Map data) => post('http://youapi/users', body: data);\n  // Post request with File\n  Future<Response<CasesModel>> postCases(List<int> image) {\n    final form = FormData({\n      'file': MultipartFile(image, filename: 'avatar.png'),\n      'otherFile': MultipartFile(image, filename: 'cover.png'),\n    });\n    return post('http://youapi/users/upload', form);\n  }\n\n  GetSocket userMessages() {\n    return socket('https://yourapi/users/socket');\n  }\n}\n")),Object(o.b)("h3",{id:"custom-configuration"},"Custom configuration"),Object(o.b)("p",null,"GetConnect is highly customizable You can define base Url, as answer modifiers, as Requests modifiers, define an authenticator, and even the number of attempts in which it will try to authenticate itself, in addition to giving the possibility to define a standard decoder that will transform all your requests into your Models without any additional configuration."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class HomeProvider extends GetConnect {\n  @override\n  void onInit() {\n    // All request will pass to jsonEncode so CasesModel.fromJson()\n    httpClient.defaultDecoder = CasesModel.fromJson;\n    httpClient.baseUrl = 'https://api.covid19api.com';\n    // baseUrl = 'https://api.covid19api.com'; // It define baseUrl to\n    // Http and websockets if used with no [httpClient] instance\n\n    // It's will attach 'apikey' property on header from all requests\n    httpClient.addRequestModifier((request) {\n      request.headers['apikey'] = '12345678';\n      return request;\n    });\n\n    // Even if the server sends data from the country \"Brazil\",\n    // it will never be displayed to users, because you remove\n    // that data from the response, even before the response is delivered\n    httpClient.addResponseModifier<CasesModel>((request, response) {\n      CasesModel model = response.body;\n      if (model.countries.contains('Brazil')) {\n        model.countries.remove('Brazilll');\n      }\n    });\n\n    httpClient.addAuthenticator((request) async {\n      final response = await get(\"http://yourapi/token\");\n      final token = response.body['token'];\n      // Set the header\n      request.headers['Authorization'] = \"$token\";\n      return request;\n    });\n\n    //Autenticator will be called 3 times if HttpStatus is\n    //HttpStatus.unauthorized\n    httpClient.maxAuthRetries = 3;\n  }\n  }\n\n  @override\n  Future<Response<CasesModel>> getCases(String path) => get(path);\n}\n")),Object(o.b)("h2",{id:"getpage-middleware"},"GetPage Middleware"),Object(o.b)("p",null,"The GetPage has now new property that takes a list of GetMiddleWare and run them in the specific order."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note"),": When GetPage has a Middlewares, all the children of this page will have the same middlewares automatically."),Object(o.b)("h3",{id:"priority"},"Priority"),Object(o.b)("p",null,"The Order of the Middlewares to run can pe set by the priority in the GetMiddleware."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"final middlewares = [\n  GetMiddleware(priority: 2),\n  GetMiddleware(priority: 5),\n  GetMiddleware(priority: 4),\n  GetMiddleware(priority: -8),\n];\n")),Object(o.b)("p",null,"those middlewares will be run in this order ",Object(o.b)("strong",{parentName:"p"},"-8 => 2 => 4 => 5")),Object(o.b)("h3",{id:"redirect"},"Redirect"),Object(o.b)("p",null,"This function will be called when the page of the called route is being searched for. It takes RouteSettings as a result to redirect to. Or give it null and there will be no redirecting."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"GetPage redirect( ) {\n  final authService = Get.find<AuthService>();\n  return authService.authed.value ? null : RouteSettings(name: '/login')\n}\n")),Object(o.b)("h3",{id:"onpagecalled"},"onPageCalled"),Object(o.b)("p",null,"This function will be called when this Page is called before anything created\nyou can use it to change something about the page or give it new page"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"GetPage onPageCalled(GetPage page) {\n  final authService = Get.find<AuthService>();\n  return page.copyWith(title: 'Welcome ${authService.UserName}');\n}\n")),Object(o.b)("h3",{id:"onbindingsstart"},"OnBindingsStart"),Object(o.b)("p",null,"This function will be called right before the Bindings are initialize.\nHere you can change Bindings for this page."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"List<Bindings> onBindingsStart(List<Bindings> bindings) {\n  final authService = Get.find<AuthService>();\n  if (authService.isAdmin) {\n    bindings.add(AdminBinding());\n  }\n  return bindings;\n}\n")),Object(o.b)("h3",{id:"onpagebuildstart"},"OnPageBuildStart"),Object(o.b)("p",null,"This function will be called right after the Bindings are initialize.\nHere you can do something after that you created the bindings and before creating the page widget."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"GetPageBuilder onPageBuildStart(GetPageBuilder page) {\n  print('bindings are ready');\n  return page;\n}\n")),Object(o.b)("h3",{id:"onpagebuilt"},"OnPageBuilt"),Object(o.b)("p",null,"This function will be called right after the GetPage.page function is called and will give you the result of the function. and take the widget that will be showed."),Object(o.b)("h3",{id:"onpagedispose"},"OnPageDispose"),Object(o.b)("p",null,"This function will be called right after disposing all the related objects (Controllers, views, ...) of the page."),Object(o.b)("h2",{id:"other-advanced-apis"},"Other Advanced APIs"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// give the current args from currentScreen\nGet.arguments\n\n// give name of previous route\nGet.previousRoute\n\n// give the raw route to access for example, rawRoute.isFirst()\nGet.rawRoute\n\n// give access to Routing API from GetObserver\nGet.routing\n\n// check if snackbar is open\nGet.isSnackbarOpen\n\n// check if dialog is open\nGet.isDialogOpen\n\n// check if bottomsheet is open\nGet.isBottomSheetOpen\n\n// remove one route.\nGet.removeRoute()\n\n// back repeatedly until the predicate returns true.\nGet.until()\n\n// go to next route and remove all the previous routes until the predicate returns true.\nGet.offUntil()\n\n// go to next named route and remove all the previous routes until the predicate returns true.\nGet.offNamedUntil()\n\n//Check in what platform the app is running\nGetPlatform.isAndroid\nGetPlatform.isIOS\nGetPlatform.isMacOS\nGetPlatform.isWindows\nGetPlatform.isLinux\nGetPlatform.isFuchsia\n\n//Check the device type\nGetPlatform.isMobile\nGetPlatform.isDesktop\n//All platforms are supported independently in web!\n//You can tell if you are running inside a browser\n//on Windows, iOS, OSX, Android, etc.\nGetPlatform.isWeb\n\n\n// Equivalent to : MediaQuery.of(context).size.height,\n// but immutable.\nGet.height\nGet.width\n\n// Gives the current context of the Navigator.\nGet.context\n\n// Gives the context of the snackbar/dialog/bottomsheet in the foreground, anywhere in your code.\nGet.contextOverlay\n\n// Note: the following methods are extensions on context. Since you\n// have access to context in any place of your UI, you can use it anywhere in the UI code\n\n// If you need a changeable height/width (like Desktop or browser windows that can be scaled) you will need to use context.\ncontext.width\ncontext.height\n\n// Gives you the power to define half the screen, a third of it and so on.\n// Useful for responsive applications.\n// param dividedBy (double) optional - default: 1\n// param reducedBy (double) optional - default: 0\ncontext.heightTransformer()\ncontext.widthTransformer()\n\n/// Similar to MediaQuery.of(context).size\ncontext.mediaQuerySize()\n\n/// Similar to MediaQuery.of(context).padding\ncontext.mediaQueryPadding()\n\n/// Similar to MediaQuery.of(context).viewPadding\ncontext.mediaQueryViewPadding()\n\n/// Similar to MediaQuery.of(context).viewInsets;\ncontext.mediaQueryViewInsets()\n\n/// Similar to MediaQuery.of(context).orientation;\ncontext.orientation()\n\n/// Check if device is on landscape mode\ncontext.isLandscape()\n\n/// Check if device is on portrait mode\ncontext.isPortrait()\n\n/// Similar to MediaQuery.of(context).devicePixelRatio;\ncontext.devicePixelRatio()\n\n/// Similar to MediaQuery.of(context).textScaleFactor;\ncontext.textScaleFactor()\n\n/// Get the shortestSide from screen\ncontext.mediaQueryShortestSide()\n\n/// True if width be larger than 800\ncontext.showNavbar()\n\n/// True if the shortestSide is smaller than 600p\ncontext.isPhone()\n\n/// True if the shortestSide is largest than 600p\ncontext.isSmallTablet()\n\n/// True if the shortestSide is largest than 720p\ncontext.isLargeTablet()\n\n/// True if the current device is Tablet\ncontext.isTablet()\n\n/// Returns a value<T> according to the screen size\n/// can give value for:\n/// watch: if the shortestSide is smaller than 300\n/// mobile: if the shortestSide is smaller than 600\n/// tablet: if the shortestSide is smaller than 1200\n/// desktop: if width is largest than 1200\ncontext.responsiveValue<T>()\n")),Object(o.b)("h3",{id:"optional-global-settings-and-manual-configurations"},"Optional Global Settings and Manual configurations"),Object(o.b)("p",null,"GetMaterialApp configures everything for you, but if you want to configure Get manually."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"MaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [GetObserver()],\n);\n")),Object(o.b)("p",null,"You will also be able to use your own Middleware within ",Object(o.b)("inlineCode",{parentName:"p"},"GetObserver"),", this will not influence anything."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"MaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [\n    GetObserver(MiddleWare.observer) // Here\n  ],\n);\n")),Object(o.b)("p",null,"You can create ",Object(o.b)("em",{parentName:"p"},"Global Settings")," for ",Object(o.b)("inlineCode",{parentName:"p"},"Get"),". Just add ",Object(o.b)("inlineCode",{parentName:"p"},"Get.config")," to your code before pushing any route.\nOr do it directly in your ",Object(o.b)("inlineCode",{parentName:"p"},"GetMaterialApp")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"GetMaterialApp(\n  enableLog: true,\n  defaultTransition: Transition.fade,\n  opaqueRoute: Get.isOpaqueRouteDefault,\n  popGesture: Get.isPopGestureEnable,\n  transitionDuration: Get.defaultDurationTransition,\n  defaultGlobalState: Get.defaultGlobalState,\n);\n\nGet.config(\n  enableLog = true,\n  defaultPopGesture = true,\n  defaultTransition = Transitions.cupertino\n)\n")),Object(o.b)("p",null,"You can optionally redirect all the logging messages from ",Object(o.b)("inlineCode",{parentName:"p"},"Get"),".\nIf you want to use your own, favourite logging package,\nand want to capture the logs there:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"GetMaterialApp(\n  enableLog: true,\n  logWriterCallback: localLogWriter,\n);\n\nvoid localLogWriter(String text, {bool isError = false}) {\n  // pass the message to your favourite logging package here\n  // please note that even if enableLog: false log messages will be pushed in this callback\n  // you get check the flag if you want through GetConfig.isLogEnable\n}\n\n")),Object(o.b)("h3",{id:"local-state-widgets"},"Local State Widgets"),Object(o.b)("p",null,"These Widgets allows you to manage a single value, and keep the state ephemeral and locally.\nWe have flavours for Reactive and Simple.\nFor instance, you might use them to toggle obscureText in a ",Object(o.b)("inlineCode",{parentName:"p"},"TextField"),", maybe create a custom\nExpandable Panel, or maybe modify the current index in ",Object(o.b)("inlineCode",{parentName:"p"},"BottomNavigationBar")," while changing the content\nof the body in a ",Object(o.b)("inlineCode",{parentName:"p"},"Scaffold"),"."),Object(o.b)("h4",{id:"valuebuilder"},"ValueBuilder"),Object(o.b)("p",null,"A simplification of ",Object(o.b)("inlineCode",{parentName:"p"},"StatefulWidget")," that works with a ",Object(o.b)("inlineCode",{parentName:"p"},".setState")," callback that takes the updated value."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'ValueBuilder<bool>(\n  initialValue: false,\n  builder: (value, updateFn) => Switch(\n    value: value,\n    onChanged: updateFn, // same signature! you could use ( newValue ) => updateFn( newValue )\n  ),\n  // if you need to call something outside the builder method.\n  onUpdate: (value) => print("Value updated: $value"),\n  onDispose: () => print("Widget unmounted"),\n),\n')),Object(o.b)("h4",{id:"obxvalue"},"ObxValue"),Object(o.b)("p",null,"Similar to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#valuebuilder"}),Object(o.b)("inlineCode",{parentName:"a"},"ValueBuilder")),", but this is the Reactive version, you pass a Rx instance (remember the magical .obs?) and\nupdates automatically... isn't it awesome?"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"ObxValue((data) => Switch(\n        value: data.value,\n        onChanged: data, // Rx has a _callable_ function! You could use (flag) => data.value = flag,\n    ),\n    false.obs,\n),\n")),Object(o.b)("h2",{id:"useful-tips"},"Useful tips"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},".obs"),"ervables (also known as ",Object(o.b)("em",{parentName:"p"},"Rx")," Types) have a wide variety of internal methods and operators."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Is very common to ",Object(o.b)("em",{parentName:"p"},"believe")," that a property with ",Object(o.b)("inlineCode",{parentName:"p"},".obs")," ",Object(o.b)("strong",{parentName:"p"},"IS")," the actual value... but make no mistake!\nWe avoid the Type declaration of the variable, because Dart's compiler is smart enough, and the code\nlooks cleaner, but:")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var message = 'Hello world'.obs;\nprint( 'Message \"$message\" has Type ${message.runtimeType}');\n")),Object(o.b)("p",null,"Even if ",Object(o.b)("inlineCode",{parentName:"p"},"message")," ",Object(o.b)("em",{parentName:"p"},"prints")," the actual String value, the Type is ",Object(o.b)("strong",{parentName:"p"},"RxString"),"!"),Object(o.b)("p",null,"So, you can't do ",Object(o.b)("inlineCode",{parentName:"p"},"message.substring( 0, 4 )"),".\nYou have to access the real ",Object(o.b)("inlineCode",{parentName:"p"},"value")," inside the ",Object(o.b)("em",{parentName:"p"},"observable"),':\nThe most "used way" is ',Object(o.b)("inlineCode",{parentName:"p"},".value"),", but, did you know that you can also use..."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"final name = 'GetX'.obs;\n// only \"updates\" the stream, if the value is different from the current one.\nname.value = 'Hey';\n\n// All Rx properties are \"callable\" and returns the new value.\n// but this approach does not accepts `null`, the UI will not rebuild.\nname('Hello');\n\n// is like a getter, prints 'Hello'.\nname() ;\n\n/// numbers:\n\nfinal count = 0.obs;\n\n// You can use all non mutable operations from num primitives!\ncount + 1;\n\n// Watch out! this is only valid if `count` is not final, but var\ncount += 1;\n\n// You can also compare against values:\ncount > 2;\n\n/// booleans:\n\nfinal flag = false.obs;\n\n// switches the value between true/false\nflag.toggle();\n\n\n/// all types:\n\n// Sets the `value` to null.\nflag.nil();\n\n// All toString(), toJson() operations are passed down to the `value`\nprint( count ); // calls `toString()` inside  for RxInt\n\nfinal abc = [0,1,2].obs;\n// Converts the value to a json Array, prints RxList\n// Json is supported by all Rx types!\nprint('json: ${jsonEncode(abc)}, type: ${abc.runtimeType}');\n\n// RxMap, RxList and RxSet are special Rx types, that extends their native types.\n// but you can work with a List as a regular list, although is reactive!\nabc.add(12); // pushes 12 to the list, and UPDATES the stream.\nabc[3]; // like Lists, reads the index 3.\n\n\n// equality works with the Rx and the value, but hashCode is always taken from the value\nfinal number = 12.obs;\nprint( number == 12 ); // prints > true\n\n/// Custom Rx Models:\n\n// toJson(), toString() are deferred to the child, so you can implement override on them, and print() the observable directly.\n\nclass User {\n    String name, last;\n    int age;\n    User({this.name, this.last, this.age});\n\n    @override\n    String toString() => '$name $last, $age years old';\n}\n\nfinal user = User(name: 'John', last: 'Doe', age: 33).obs;\n\n// `user` is \"reactive\", but the properties inside ARE NOT!\n// So, if we change some variable inside of it...\nuser.value.name = 'Roi';\n// The widget will not rebuild!,\n// `Rx` don't have any clue when you change something inside user.\n// So, for custom classes, we need to manually \"notify\" the change.\nuser.refresh();\n\n// or we can use the `update()` method!\nuser.update((value){\n  value.name='Roi';\n});\n\nprint( user );\n")),Object(o.b)("h2",{id:"statemixin"},"StateMixin"),Object(o.b)("p",null,"Another way to handle your ",Object(o.b)("inlineCode",{parentName:"p"},"UI")," state is use the ",Object(o.b)("inlineCode",{parentName:"p"},"StateMixin<T>")," .\nTo implement it, use the ",Object(o.b)("inlineCode",{parentName:"p"},"with")," to add the ",Object(o.b)("inlineCode",{parentName:"p"},"StateMixin<T>"),"\nto your controller which allows a T model."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Controller extends GetController with StateMixin<User>{}\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"change()")," method change the State whenever we want.\nJust pass the data and the status in this way:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"change(data, status: RxStatus.success());\n")),Object(o.b)("p",null,"RxStatus allow these status:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"RxStatus.loading();\nRxStatus.success();\nRxStatus.empty();\nRxStatus.error('message');\n")),Object(o.b)("p",null,"To represent it in the UI, use:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class OtherClass extends GetView<Controller> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n\n      body: controller.obx(\n        (state)=>Text(state.name),\n        \n        // here you can put your custom loading indicator, but\n        // by default would be Center(child:CircularProgressIndicator())\n        onLoading: CustomLoadingIndicator(),\n        onEmpty: Text('No data found'),\n\n        // here also you can set your own error widget, but by\n        // default will be an Center(child:Text(error))\n        onError: (error)=>Text(error),\n      ),\n    );\n}\n")),Object(o.b)("h4",{id:"getview"},"GetView"),Object(o.b)("p",null,"I love this Widget, is so simple, yet, so useful!"),Object(o.b)("p",null,"Is a ",Object(o.b)("inlineCode",{parentName:"p"},"const Stateless")," Widget that has a getter ",Object(o.b)("inlineCode",{parentName:"p"},"controller")," for a registered ",Object(o.b)("inlineCode",{parentName:"p"},"Controller"),", that's all."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"})," class AwesomeController extends GetController {\n   final String title = 'My Awesome View';\n }\n\n  // ALWAYS remember to pass the `Type` you used to register your controller!\n class AwesomeView extends GetView<AwesomeController> {\n   @override\n   Widget build(BuildContext context) {\n     return Container(\n       padding: EdgeInsets.all(20),\n       child: Text(controller.title), // just call `controller.something`\n     );\n   }\n }\n")),Object(o.b)("h4",{id:"getresponsiveview"},"GetResponsiveView"),Object(o.b)("p",null,"Extend this widget to build responsive view.\nthis widget contains the ",Object(o.b)("inlineCode",{parentName:"p"},"screen")," property that have all\ninformation about the screen size and type."),Object(o.b)("h5",{id:"how-to-use-it"},"How to use it"),Object(o.b)("p",null,"You have two options to build it."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"with ",Object(o.b)("inlineCode",{parentName:"li"},"builder")," method you return the widget to build."),Object(o.b)("li",{parentName:"ul"},"with methods ",Object(o.b)("inlineCode",{parentName:"li"},"desktop"),", ",Object(o.b)("inlineCode",{parentName:"li"},"tablet"),",",Object(o.b)("inlineCode",{parentName:"li"},"phone"),", ",Object(o.b)("inlineCode",{parentName:"li"},"watch"),". the specific\nmethod will be built when the screen type matches the method\nwhen the screen is ","[ScreenType.Tablet]"," the ",Object(o.b)("inlineCode",{parentName:"li"},"tablet")," method\nwill be exuded and so on.\n",Object(o.b)("strong",{parentName:"li"},"Note:")," If you use this method please set the property ",Object(o.b)("inlineCode",{parentName:"li"},"alwaysUseBuilder")," to ",Object(o.b)("inlineCode",{parentName:"li"},"false"))),Object(o.b)("p",null,"With ",Object(o.b)("inlineCode",{parentName:"p"},"settings")," property you can set the width limit for the screen types."),Object(o.b)("p",null,Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"https://github.com/SchabanBo/get_page_example/blob/master/docs/Example.gif?raw=true",alt:"example"})),"\nCode to this screen\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/SchabanBo/get_page_example/blob/master/lib/pages/responsive_example/responsive_view.dart"}),"code")),Object(o.b)("h4",{id:"getwidget"},"GetWidget"),Object(o.b)("p",null,"Most people have no idea about this Widget, or totally confuse the usage of it.\nThe use case is very rare, but very specific: It ",Object(o.b)("inlineCode",{parentName:"p"},"caches")," a Controller.\nBecause of the ",Object(o.b)("em",{parentName:"p"},"cache"),", can't be a ",Object(o.b)("inlineCode",{parentName:"p"},"const Stateless"),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},'So, when do you need to "cache" a Controller?')),Object(o.b)("p",null,'If you use, another "not so common" feature of ',Object(o.b)("strong",{parentName:"p"},"GetX"),": ",Object(o.b)("inlineCode",{parentName:"p"},"Get.create()"),"."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Get.create(()=>Controller())")," will generate a new ",Object(o.b)("inlineCode",{parentName:"p"},"Controller")," each time you call\n",Object(o.b)("inlineCode",{parentName:"p"},"Get.find<Controller>()"),","),Object(o.b)("p",null,"That's where ",Object(o.b)("inlineCode",{parentName:"p"},"GetWidget"),' shines... as you can use it, for example,\nto keep a list of Todo items. So, if the widget gets "rebuilt", it will keep the same controller instance.'),Object(o.b)("h4",{id:"getxservice"},"GetxService"),Object(o.b)("p",null,"This class is like a ",Object(o.b)("inlineCode",{parentName:"p"},"GetxController"),", it shares the same lifecycle ( ",Object(o.b)("inlineCode",{parentName:"p"},"onInit()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"onReady()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"onClose()"),').\nBut has no "logic" inside of it. It just notifies ',Object(o.b)("strong",{parentName:"p"},"GetX")," Dependency Injection system, that this subclass\n",Object(o.b)("strong",{parentName:"p"},"can not")," be removed from memory."),Object(o.b)("p",null,'So is super useful to keep your "Services" always reachable and active with ',Object(o.b)("inlineCode",{parentName:"p"},"Get.find()"),". Like:\n",Object(o.b)("inlineCode",{parentName:"p"},"ApiService"),", ",Object(o.b)("inlineCode",{parentName:"p"},"StorageService"),", ",Object(o.b)("inlineCode",{parentName:"p"},"CacheService"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"Future<void> main() async {\n  await initServices(); /// AWAIT SERVICES INITIALIZATION.\n  runApp(SomeApp());\n}\n\n/// Is a smart move to make your Services intiialize before you run the Flutter app.\n/// as you can control the execution flow (maybe you need to load some Theme configuration,\n/// apiKey, language defined by the User... so load SettingService before running ApiService.\n/// so GetMaterialApp() doesnt have to rebuild, and takes the values directly.\nvoid initServices() async {\n  print('starting services ...');\n  /// Here is where you put get_storage, hive, shared_pref initialization.\n  /// or moor connection, or whatever that's async.\n  await Get.putAsync(() => DbService().init());\n  await Get.putAsync(SettingsService()).init();\n  print('All services started...');\n}\n\nclass DbService extends GetxService {\n  Future<DbService> init() async {\n    print('$runtimeType delays 2 sec');\n    await 2.delay();\n    print('$runtimeType ready!');\n    return this;\n  }\n}\n\nclass SettingsService extends GetxService {\n  void init() async {\n    print('$runtimeType delays 1 sec');\n    await 1.delay();\n    print('$runtimeType ready!');\n  }\n}\n\n")),Object(o.b)("p",null,"The only way to actually delete a ",Object(o.b)("inlineCode",{parentName:"p"},"GetxService"),", is with ",Object(o.b)("inlineCode",{parentName:"p"},"Get.reset()"),' which is like a\n"Hot Reboot" of your app. So remember, if you need absolute persistence of a class instance during the\nlifetime of your app, use ',Object(o.b)("inlineCode",{parentName:"p"},"GetxService"),"."),Object(o.b)("h1",{id:"breaking-changes-from-20"},"Breaking changes from 2.0"),Object(o.b)("p",null,"1- Rx types:"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Before"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"After"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"StringX"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"RxString"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"IntX"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"RxInt"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"MapX"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"RxMap"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"ListX"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"RxList"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"NumX"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"RxNum"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"DoubleX"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"RxDouble"))))),Object(o.b)("p",null,"RxController and GetBuilder now have merged, you no longer need to memorize which controller you want to use, just use GetxController, it will work for simple state management and for reactive as well."),Object(o.b)("p",null,"2- NamedRoutes\nBefore:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"GetMaterialApp(\n  namedRoutes: {\n    '/': GetRoute(page: Home()),\n  }\n)\n")),Object(o.b)("p",null,"Now:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"GetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page: () => Home()),\n  ]\n)\n")),Object(o.b)("p",null,"Why this change?\nOften, it may be necessary to decide which page will be displayed from a parameter, or a login token, the previous approach was inflexible, as it did not allow this.\nInserting the page into a function has significantly reduced the RAM consumption, since the routes will not be allocated in memory since the app was started, and it also allowed to do this type of approach:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"\nGetStorage box = GetStorage();\n\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page:(){\n      return box.hasData('token') ? Home() : Login();\n    })\n  ]\n)\n")),Object(o.b)("h1",{id:"why-getx"},"Why Getx?"),Object(o.b)("p",null,"1- Many times after a Flutter update, many of your packages will break. Sometimes compilation errors happen, errors often appear that there are still no answers about, and the developer needs to know where the error came from, track the error, only then try to open an issue in the corresponding repository, and see its problem solved. Get centralizes the main resources for development (State, dependency and route management), allowing you to add a single package to your pubspec, and start working. After a Flutter update, the only thing you need to do is update the Get dependency, and get to work. Get also resolves compatibility issues. How many times a version of a package is not compatible with the version of another, because one uses a dependency in one version, and the other in another version? This is also not a concern using Get, as everything is in the same package and is fully compatible."),Object(o.b)("p",null,"2- Flutter is easy, Flutter is incredible, but Flutter still has some boilerplate that may be unwanted for most developers, such as ",Object(o.b)("inlineCode",{parentName:"p"},"Navigator.of(context).push (context, builder [...]"),". Get simplifies development. Instead of writing 8 lines of code to just call a route, you can just do it: ",Object(o.b)("inlineCode",{parentName:"p"},"Get.to(Home())")," and you're done, you'll go to the next page. Dynamic web urls are a really painful thing to do with Flutter currently, and that with GetX is stupidly simple. Managing states in Flutter, and managing dependencies is also something that generates a lot of discussion, as there are hundreds of patterns in the pub. But there is nothing as easy as adding a \".obs\" at the end of your variable, and place your widget inside an Obx, and that's it, all updates to that variable will be automatically updated on the screen."),Object(o.b)("p",null,"3- Ease without worrying about performance. Flutter's performance is already amazing, but imagine that you use a state manager, and a locator to distribute your blocs/stores/controllers/ etc. classes. You will have to manually call the exclusion of that dependency when you don't need it. But have you ever thought of simply using your controller, and when it was no longer being used by anyone, it would simply be deleted from memory? That's what GetX does. With SmartManagement, everything that is not being used is deleted from memory, and you shouldn't have to worry about anything but programming. You will be assured that you are consuming the minimum necessary resources, without even having created a logic for this."),Object(o.b)("p",null,"4- Actual decoupling. You may have heard the concept \"separate the view from the business logic\". This is not a peculiarity of BLoC, MVC, MVVM, and any other standard on the market has this concept. However, this concept can often be mitigated in Flutter due to the use of context.\nIf you need context to find an InheritedWidget, you need it in the view, or pass the context by parameter. I particularly find this solution very ugly, and to work in teams we will always have a dependence on View's business logic. Getx is unorthodox with the standard approach, and while it does not completely ban the use of StatefulWidgets, InitState, etc., it always has a similar approach that can be cleaner. Controllers have life cycles, and when you need to make an APIREST request for example, you don't depend on anything in the view. You can use onInit to initiate the http call, and when the data arrives, the variables will be populated. As GetX is fully reactive (really, and works under streams), once the items are filled, all widgets that use that variable will be automatically updated in the view. This allows people with UI expertise to work only with widgets, and not have to send anything to business logic other than user events (like clicking a button), while people working with business logic will be free to create and test the business logic separately."),Object(o.b)("p",null,"This library will always be updated and implementing new features. Feel free to offer PRs and contribute to them."),Object(o.b)("h1",{id:"community"},"Community"),Object(o.b)("h2",{id:"community-channels"},"Community channels"),Object(o.b)("p",null,"GetX has a highly active and helpful community. If you have questions, or would like any assistance regarding the use of this framework, please join our community channels, your question will be answered more quickly, and it will be the most suitable place. This repository is exclusive for opening issues, and requesting resources, but feel free to be part of GetX Community."),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),Object(o.b)("strong",{parentName:"th"},"Slack")),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),Object(o.b)("strong",{parentName:"th"},"Discord")),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),Object(o.b)("strong",{parentName:"th"},"Telegram")))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(o.b)("a",Object(a.a)({parentName:"td"},{href:"https://communityinviter.com/apps/getxworkspace/getx"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/badge/slack-join-orange.svg",alt:"Get on Slack"})))),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(o.b)("a",Object(a.a)({parentName:"td"},{href:"https://discord.com/invite/9Hpt99N"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/discord/722900883784073290.svg?logo=discord",alt:"Discord Shield"})))),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(o.b)("a",Object(a.a)({parentName:"td"},{href:"https://t.me/joinchat/PhdbJRmsZNpAqSLJL6bH7g"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/badge/chat-on%20Telegram-blue.svg",alt:"Telegram"}))))))),Object(o.b)("h2",{id:"how-to-contribute"},"How to contribute"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Want to contribute to the project? We will be proud to highlight you as one of our collaborators. Here are some points where you can contribute and make Get (and Flutter) even better.")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Helping to translate the readme into other languages."),Object(o.b)("li",{parentName:"ul"},"Adding documentation to the readme (a lot of Get's functions haven't been documented yet)."),Object(o.b)("li",{parentName:"ul"},"Write articles or make videos teaching how to use Get (they will be inserted in the Readme and in the future in our Wiki)."),Object(o.b)("li",{parentName:"ul"},"Offering PRs for code/tests."),Object(o.b)("li",{parentName:"ul"},"Including new functions.")),Object(o.b)("p",null,"Any contribution is welcome!"),Object(o.b)("h2",{id:"articles-and-videos"},"Articles and videos"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.youtube.com/playlist?list=PLV1fXIAyjeuZ6M8m56zajMUwu4uE3-SL0"}),"Flutter Getx EcoSystem package for arabic people")," - Tutorial by ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/UsamaElgendy"}),"Pesa Coder"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://medium.com/swlh/flutter-dynamic-themes-in-3-lines-c3b375f292e3"}),"Dynamic Themes in 3 lines using GetX\u2122")," - Tutorial by ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/RodBr"}),"Rod Brown"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=RaqPIoJSTtI"}),"Complete GetX\u2122 Navigation")," - Route management video by Amateur Coder."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=CNpXbeI_slw"}),"Complete GetX State Management")," - State management video by Amateur Coder."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://youtu.be/ttQtlX_Q0eU"}),"GetX\u2122 Other Features")," - Utils, storage, bindings and other features video by Amateur Coder."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=BiV0DcXgk58"}),"Firestore User with GetX | Todo App")," - Video by Amateur Coder."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=-H-T_BSgfOE"}),"Firebase Auth with GetX | Todo App")," - Video by Amateur Coder."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://medium.com/flutter-community/the-flutter-getx-ecosystem-state-management-881c7235511d"}),"The Flutter GetX\u2122 Ecosystem ~ State Management")," - State management by ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/imaachman"}),"Aachman Garg"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://medium.com/flutter-community/the-flutter-getx-ecosystem-dependency-injection-8e763d0ec6b9"}),"The Flutter GetX\u2122 Ecosystem ~ Dependency Injection")," - Dependency Injection by ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/imaachman"}),"Aachman Garg"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=IYQgtu9TM74"}),"GetX, the all-in-one Flutter package")," - A brief tutorial covering State Management and Navigation by Thad Carnevalli."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=EcnqFasHf18"}),"Build a To-do List App from scratch using Flutter and GetX")," - UI + State Management + Storage video by Thad Carnevalli."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://medium.com/@jeffmcmorris/getx-flutter-firebase-auth-example-b383c1dd1de2"}),"GetX Flutter Firebase Auth Example")," - Article by Jeff McMorris."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.appwithflutter.com/flutter-state-management-with-getx/"}),"Flutter State Management with GetX \u2013 Complete App")," - by App With Flutter."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.appwithflutter.com/flutter-routing-using-get-package/"}),"Flutter Routing with Animation using Get Package")," - by App With Flutter."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://dartpad.dev/2b3d0d6f9d4e312c5fdbefc414c1727e?"}),"A minimal example on dartpad")," - by ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/roipeker"}),"Roi Peker"))))}b.isMDXComponent=!0},86:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),b=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=b(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=b(n),d=a,h=u["".concat(r,".").concat(d)]||u[d]||p[d]||o;return n?i.a.createElement(h,l(l({ref:t},c),{},{components:n})):i.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);